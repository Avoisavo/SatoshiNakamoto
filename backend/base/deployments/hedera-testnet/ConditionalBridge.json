{
  "address": "0x780598BE78e696A1e9cBab5b52dC7dad3F79f5A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pythContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oftToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "targetPrice",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "enum ConditionalBridge.ConditionType",
          "name": "conditionType",
          "type": "uint8"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "executionPrice",
          "type": "int64"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BTC_USD_PRICE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_USD_PRICE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_REWARD_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "checkOrderCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "met",
          "type": "bool"
        },
        {
          "internalType": "int64",
          "name": "currentPrice",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "int64",
          "name": "targetPrice",
          "type": "int64"
        },
        {
          "internalType": "enum ConditionalBridge.ConditionType",
          "name": "conditionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "expiryDuration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "lzOptions",
          "type": "bytes"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "priceUpdate",
          "type": "bytes[]"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "int64",
          "name": "price",
          "type": "int64"
        },
        {
          "internalType": "int32",
          "name": "expo",
          "type": "int32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "markExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oftToken",
      "outputs": [
        {
          "internalType": "contract IMyOFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "int64",
          "name": "targetPrice",
          "type": "int64"
        },
        {
          "internalType": "enum ConditionalBridge.ConditionType",
          "name": "conditionType",
          "type": "uint8"
        },
        {
          "internalType": "enum ConditionalBridge.OrderStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "lzOptions",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b55a57a43a6edb7bd4c3bbba7e564c17d004ef3ed90bbcb396c6a38cee48433",
  "receipt": {
    "to": null,
    "from": "0xfEC6BB7506B4c06ddA315c8C12ED030eb05bdE28",
    "contractAddress": "0x780598BE78e696A1e9cBab5b52dC7dad3F79f5A7",
    "transactionIndex": 7,
    "gasUsed": "1777004",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000001000000000000000000000000000000000000000000000000000000040000000000000000000000000001000000200000000000000000000000000000020000000800000000000800000000000004000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaefe8471710826ed3bf74647e9f02d6ca5e4dca89ffbb58f1212f16788801771",
    "transactionHash": "0x9b55a57a43a6edb7bd4c3bbba7e564c17d004ef3ed90bbcb396c6a38cee48433",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 26366753,
        "transactionHash": "0x9b55a57a43a6edb7bd4c3bbba7e564c17d004ef3ed90bbcb396c6a38cee48433",
        "address": "0x780598BE78e696A1e9cBab5b52dC7dad3F79f5A7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fec6bb7506b4c06dda315c8c12ed030eb05bde28"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaefe8471710826ed3bf74647e9f02d6ca5e4dca89ffbb58f1212f16788801771"
      }
    ],
    "blockNumber": 26366753,
    "cumulativeGasUsed": "1777004",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa2aa501b19aff244d90cc15a4cf739d2725b5729",
    "0x1498FECa6fb7525616C369592440B6E8325C3D6D",
    "0xfEC6BB7506B4c06ddA315c8C12ED030eb05bdE28"
  ],
  "numDeployments": 1,
  "solcInputHash": "3dc33fecd768354352cfc8f1f55d7e95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pythContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"targetPrice\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"enum ConditionalBridge.ConditionType\",\"name\":\"conditionType\",\"type\":\"uint8\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"executionPrice\",\"type\":\"int64\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTC_USD_PRICE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_PRICE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_REWARD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"checkOrderCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"met\",\"type\":\"bool\"},{\"internalType\":\"int64\",\"name\":\"currentPrice\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"int64\",\"name\":\"targetPrice\",\"type\":\"int64\"},{\"internalType\":\"enum ConditionalBridge.ConditionType\",\"name\":\"conditionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiryDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzOptions\",\"type\":\"bytes\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdate\",\"type\":\"bytes[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"markExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oftToken\",\"outputs\":[{\"internalType\":\"contract IMyOFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"int64\",\"name\":\"targetPrice\",\"type\":\"int64\"},{\"internalType\":\"enum ConditionalBridge.ConditionType\",\"name\":\"conditionType\",\"type\":\"uint8\"},{\"internalType\":\"enum ConditionalBridge.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzOptions\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Integrates Pyth Network price feeds with LayerZero OFT bridging\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"cancelOrder(uint256)\":{\"params\":{\"orderId\":\"Order ID to cancel\"}},\"checkOrderCondition(uint256)\":{\"params\":{\"orderId\":\"Order ID to check\"},\"returns\":{\"currentPrice\":\"Current price from Pyth\",\"met\":\"Whether condition is met\"}},\"createOrder(uint256,uint32,bytes32,int64,uint8,uint256,bytes)\":{\"params\":{\"amount\":\"Amount of OFT tokens to bridge\",\"conditionType\":\"PRICE_ABOVE or PRICE_BELOW\",\"dstEid\":\"Destination chain endpoint ID (LayerZero)\",\"expiryDuration\":\"How long the order is valid (in seconds, 0 for no expiry)\",\"lzOptions\":\"LayerZero send options (gas settings, etc.)\",\"priceFeedId\":\"Pyth price feed ID to monitor\",\"targetPrice\":\"Target price (with 8 decimals, e.g., 3800e8 for $3800)\"}},\"executeOrder(uint256,bytes[])\":{\"details\":\"Anyone can call this (keeper/bot), executor gets a small reward\",\"params\":{\"orderId\":\"Order ID to execute\",\"priceUpdate\":\"Pyth price update data (fetch from Hermes API)\"}},\"getCurrentPrice(bytes32)\":{\"params\":{\"priceFeedId\":\"Pyth price feed ID\"},\"returns\":{\"expo\":\"Price exponent\",\"price\":\"Current price\",\"timestamp\":\"Price timestamp\"}},\"markExpired(uint256)\":{\"params\":{\"orderId\":\"Order ID to mark as expired\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ConditionalBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelOrder(uint256)\":{\"notice\":\"Cancel a pending order and return tokens to user\"},\"checkOrderCondition(uint256)\":{\"notice\":\"Check if order condition is currently met (view function)\"},\"createOrder(uint256,uint32,bytes32,int64,uint8,uint256,bytes)\":{\"notice\":\"Create a conditional bridge order\"},\"executeOrder(uint256,bytes[])\":{\"notice\":\"Execute a bridge order when price condition is met\"},\"getCurrentPrice(bytes32)\":{\"notice\":\"Get current price from Pyth feed\"},\"markExpired(uint256)\":{\"notice\":\"Mark expired orders (callable by anyone)\"}},\"notice\":\"Enables automated token bridging when price conditions are met\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConditionalBridge.sol\":\"ConditionalBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Returns the required fee to update a TWAP price.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getTwapUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime,` but choose to store price updates if `storeUpdatesIfFresh`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// This method will eventually allow the caller to determine whether parsed price feeds should update\\n    /// the stored values as well.\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minAllowedPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxAllowedPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @param storeUpdatesIfFresh flag for the parse function to\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesWithConfig(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minAllowedPublishTime,\\n        uint64 maxAllowedPublishTime,\\n        bool checkUniqueness,\\n        bool checkUpdateDataIsMinimal,\\n        bool storeUpdatesIfFresh\\n    )\\n        external\\n        payable\\n        returns (\\n            PythStructs.PriceFeed[] memory priceFeeds,\\n            uint64[] memory slots\\n        );\\n\\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\\n    ///\\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\\n    /// divided by the time period. It requires exactly two updates that contain valid price information\\n    /// for all the requested price IDs.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the updateData array.\\n    ///\\n    /// @dev Reverts if:\\n    /// - The transferred fee is not sufficient\\n    /// - The updateData is invalid or malformed\\n    /// - The updateData array does not contain exactly 2 updates\\n    /// - There is no update for any of the given `priceIds`\\n    /// - The time ordering between data points is invalid (start time must be before end time)\\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\\n    /// @param priceIds Array of price ids to calculate TWAP for\\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\\n    function parseTwapPriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds\\n    )\\n        external\\n        payable\\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xada6a1f4898b056d2804409ecad466b786dc6a12bc6f8f247e7f1471c1b86fcd\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param startTime Start time of the TWAP.\\n    /// @param endTime End time of the TWAP.\\n    /// @param twapPrice Price of the TWAP.\\n    /// @param twapConf Confidence interval of the TWAP.\\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\\n    event TwapPriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 startTime,\\n        uint64 endTime,\\n        int64 twapPrice,\\n        uint64 twapConf,\\n        uint32 downSlotsRatio\\n    );\\n}\\n\",\"keccak256\":\"0xd67239becd2c39bd9d065830be24e70606f5747ab31b8818bea849d09ac17ddc\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n\\n    struct TwapPriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Start time of the TWAP\\n        uint64 startTime;\\n        // End time of the TWAP\\n        uint64 endTime;\\n        // TWAP price\\n        Price twap;\\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\\n        // For example:\\n        //   - 0 means all price updates were available\\n        //   - 500_000 means 50% of updates were missed\\n        //   - 1_000_000 means all updates were missed\\n        // This can be used to assess the quality/reliability of the TWAP calculation.\\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\\n        // and revert if downSlotsRatio exceeds it.\\n        uint32 downSlotsRatio;\\n    }\\n\\n    // Information used to calculate time-weighted average prices (TWAP)\\n    struct TwapPriceInfo {\\n        // slot 1\\n        int128 cumulativePrice;\\n        uint128 cumulativeConf;\\n        // slot 2\\n        uint64 numDownSlots;\\n        uint64 publishSlot;\\n        uint64 publishTime;\\n        uint64 prevPublishTime;\\n        // slot 3\\n        int32 expo;\\n    }\\n}\\n\",\"keccak256\":\"0x474436bf0d558cc9b2c00a9d0ce318147acdf7963f34ef4acadb9248e65bbc7b\",\"license\":\"Apache-2.0\"},\"contracts/ConditionalBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IMyOFT {\\n    struct SendParam {\\n        uint32 dstEid;\\n        bytes32 to;\\n        uint256 amountLD;\\n        uint256 minAmountLD;\\n        bytes extraOptions;\\n        bytes composeMsg;\\n        bytes oftCmd;\\n    }\\n    \\n    struct MessagingFee {\\n        uint256 nativeFee;\\n        uint256 lzTokenFee;\\n    }\\n    \\n    struct MessagingReceipt {\\n        bytes32 guid;\\n        uint64 nonce;\\n        MessagingFee fee;\\n    }\\n    \\n    struct OFTReceipt {\\n        uint256 amountSentLD;\\n        uint256 amountReceivedLD;\\n    }\\n    \\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt);\\n    \\n    function quoteSend(\\n        SendParam calldata _sendParam,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory msgFee);\\n    \\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n * @title ConditionalBridge\\n * @notice Enables automated token bridging when price conditions are met\\n * @dev Integrates Pyth Network price feeds with LayerZero OFT bridging\\n */\\ncontract ConditionalBridge is Ownable, ReentrancyGuard {\\n    IPyth public immutable pyth;\\n    IMyOFT public immutable oftToken;\\n    \\n    bytes32 public constant ETH_USD_PRICE_ID = 0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace;\\n    bytes32 public constant BTC_USD_PRICE_ID = 0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43;\\n    \\n    enum ConditionType {\\n        PRICE_ABOVE,    // Execute when price >= target\\n        PRICE_BELOW     // Execute when price <= target\\n    }\\n    \\n    enum OrderStatus {\\n        PENDING,\\n        EXECUTED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n    \\n    struct BridgeOrder {\\n        uint256 orderId;\\n        address user;\\n        uint256 amount;\\n        uint32 dstEid;              // Destination chain endpoint ID\\n        bytes32 priceFeedId;        // Pyth price feed ID\\n        int64 targetPrice;          // Target price (with Pyth's 8 decimals)\\n        ConditionType conditionType;\\n        OrderStatus status;\\n        uint256 createdAt;\\n        uint256 expiresAt;\\n        bytes lzOptions;            // LayerZero send options\\n    }\\n    \\n    // Storage\\n    mapping(uint256 => BridgeOrder) public orders;\\n    uint256 public orderCount;\\n    uint256 public constant EXECUTOR_REWARD_BPS = 10; // Fixed 0.1% reward for executor\\n    \\n    // Events\\n    event OrderCreated(\\n        uint256 indexed orderId,\\n        address indexed user,\\n        uint256 amount,\\n        uint32 dstEid,\\n        bytes32 priceFeedId,\\n        int64 targetPrice,\\n        ConditionType conditionType\\n    );\\n    \\n    event OrderExecuted(\\n        uint256 indexed orderId,\\n        address indexed executor,\\n        int64 executionPrice\\n    );\\n    \\n    event OrderCancelled(uint256 indexed orderId, address indexed user);\\n    event OrderExpired(uint256 indexed orderId);\\n    \\n    constructor(\\n        address _pythContract,\\n        address _oftToken,\\n        address _owner\\n    ) Ownable(_owner) {\\n        require(_pythContract != address(0), \\\"Invalid Pyth address\\\");\\n        require(_oftToken != address(0), \\\"Invalid OFT address\\\");\\n        \\n        pyth = IPyth(_pythContract);\\n        oftToken = IMyOFT(_oftToken);\\n    }\\n    \\n    /**\\n     * @notice Create a conditional bridge order\\n     * @param amount Amount of OFT tokens to bridge\\n     * @param dstEid Destination chain endpoint ID (LayerZero)\\n     * @param priceFeedId Pyth price feed ID to monitor\\n     * @param targetPrice Target price (with 8 decimals, e.g., 3800e8 for $3800)\\n     * @param conditionType PRICE_ABOVE or PRICE_BELOW\\n     * @param expiryDuration How long the order is valid (in seconds, 0 for no expiry)\\n     * @param lzOptions LayerZero send options (gas settings, etc.)\\n     */\\n    function createOrder(\\n        uint256 amount,\\n        uint32 dstEid,\\n        bytes32 priceFeedId,\\n        int64 targetPrice,\\n        ConditionType conditionType,\\n        uint256 expiryDuration,\\n        bytes calldata lzOptions\\n    ) external nonReentrant returns (uint256 orderId) {\\n        require(amount > 0, \\\"Amount must be > 0\\\");\\n        require(targetPrice > 0, \\\"Target price must be > 0\\\");\\n        require(dstEid != 0, \\\"Invalid destination EID\\\");\\n        \\n        // Transfer tokens from user to this contract\\n        require(\\n            oftToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"Transfer failed\\\"\\n        );\\n        \\n        orderId = orderCount++;\\n        uint256 expiresAt = expiryDuration > 0 ? block.timestamp + expiryDuration : 0;\\n        \\n        orders[orderId] = BridgeOrder({\\n            orderId: orderId,\\n            user: msg.sender,\\n            amount: amount,\\n            dstEid: dstEid,\\n            priceFeedId: priceFeedId,\\n            targetPrice: targetPrice,\\n            conditionType: conditionType,\\n            status: OrderStatus.PENDING,\\n            createdAt: block.timestamp,\\n            expiresAt: expiresAt,\\n            lzOptions: lzOptions\\n        });\\n        \\n        emit OrderCreated(\\n            orderId,\\n            msg.sender,\\n            amount,\\n            dstEid,\\n            priceFeedId,\\n            targetPrice,\\n            conditionType\\n        );\\n        \\n        return orderId;\\n    }\\n    \\n    /**\\n     * @notice Execute a bridge order when price condition is met\\n     * @dev Anyone can call this (keeper/bot), executor gets a small reward\\n     * @param orderId Order ID to execute\\n     * @param priceUpdate Pyth price update data (fetch from Hermes API)\\n     */\\n    function executeOrder(\\n        uint256 orderId,\\n        bytes[] calldata priceUpdate\\n    ) external payable nonReentrant {\\n        BridgeOrder storage order = orders[orderId];\\n        \\n        require(order.status == OrderStatus.PENDING, \\\"Order not pending\\\");\\n        require(\\n            order.expiresAt == 0 || block.timestamp <= order.expiresAt,\\n            \\\"Order expired\\\"\\n        );\\n        \\n        // Update Pyth price feed\\n        uint updateFee = pyth.getUpdateFee(priceUpdate);\\n        require(msg.value >= updateFee, \\\"Insufficient fee for price update\\\");\\n        pyth.updatePriceFeeds{value: updateFee}(priceUpdate);\\n        \\n        // Check if price condition is met\\n        PythStructs.Price memory price = pyth.getPriceNoOlderThan(order.priceFeedId, 60);\\n        \\n        bool conditionMet = false;\\n        if (order.conditionType == ConditionType.PRICE_ABOVE) {\\n            conditionMet = price.price >= order.targetPrice;\\n        } else {\\n            conditionMet = price.price <= order.targetPrice;\\n        }\\n        \\n        require(conditionMet, \\\"Price condition not met\\\");\\n        \\n        // Calculate executor reward (fixed at 0.1%)\\n        uint256 executorReward = (order.amount * EXECUTOR_REWARD_BPS) / 10000;\\n        uint256 bridgeAmount = order.amount - executorReward;\\n        \\n        // Transfer reward to executor\\n        if (executorReward > 0) {\\n            require(\\n                oftToken.transfer(msg.sender, executorReward),\\n                \\\"Reward transfer failed\\\"\\n            );\\n        }\\n        \\n        // Execute LayerZero bridge\\n        bytes32 recipientBytes32 = bytes32(uint256(uint160(order.user)));\\n        \\n        IMyOFT.SendParam memory sendParam = IMyOFT.SendParam({\\n            dstEid: order.dstEid,\\n            to: recipientBytes32,\\n            amountLD: bridgeAmount,\\n            minAmountLD: bridgeAmount,\\n            extraOptions: order.lzOptions,\\n            composeMsg: \\\"\\\",\\n            oftCmd: \\\"\\\"\\n        });\\n        \\n        IMyOFT.MessagingFee memory fee = IMyOFT.MessagingFee({\\n            nativeFee: msg.value - updateFee,\\n            lzTokenFee: 0\\n        });\\n        \\n        oftToken.send{value: msg.value - updateFee}(\\n            sendParam,\\n            fee,\\n            order.user\\n        );\\n        \\n        order.status = OrderStatus.EXECUTED;\\n        \\n        emit OrderExecuted(orderId, msg.sender, price.price);\\n    }\\n    \\n    /**\\n     * @notice Cancel a pending order and return tokens to user\\n     * @param orderId Order ID to cancel\\n     */\\n    function cancelOrder(uint256 orderId) external nonReentrant {\\n        BridgeOrder storage order = orders[orderId];\\n        \\n        require(msg.sender == order.user, \\\"Not order owner\\\");\\n        require(order.status == OrderStatus.PENDING, \\\"Order not pending\\\");\\n        \\n        // Return tokens to user\\n        require(\\n            oftToken.transfer(order.user, order.amount),\\n            \\\"Transfer failed\\\"\\n        );\\n        \\n        order.status = OrderStatus.CANCELLED;\\n        \\n        emit OrderCancelled(orderId, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Mark expired orders (callable by anyone)\\n     * @param orderId Order ID to mark as expired\\n     */\\n    function markExpired(uint256 orderId) external {\\n        BridgeOrder storage order = orders[orderId];\\n        \\n        require(order.status == OrderStatus.PENDING, \\\"Order not pending\\\");\\n        require(order.expiresAt > 0, \\\"Order has no expiry\\\");\\n        require(block.timestamp > order.expiresAt, \\\"Order not expired yet\\\");\\n        \\n        // Return tokens to user\\n        require(\\n            oftToken.transfer(order.user, order.amount),\\n            \\\"Transfer failed\\\"\\n        );\\n        \\n        order.status = OrderStatus.EXPIRED;\\n        \\n        emit OrderExpired(orderId);\\n    }\\n    \\n    /**\\n     * @notice Check if order condition is currently met (view function)\\n     * @param orderId Order ID to check\\n     * @return met Whether condition is met\\n     * @return currentPrice Current price from Pyth\\n     */\\n    function checkOrderCondition(uint256 orderId) \\n        external \\n        view \\n        returns (bool met, int64 currentPrice) \\n    {\\n        BridgeOrder storage order = orders[orderId];\\n        \\n        PythStructs.Price memory price = pyth.getPriceUnsafe(order.priceFeedId);\\n        currentPrice = price.price;\\n        \\n        if (order.conditionType == ConditionType.PRICE_ABOVE) {\\n            met = currentPrice >= order.targetPrice;\\n        } else {\\n            met = currentPrice <= order.targetPrice;\\n        }\\n        \\n        return (met, currentPrice);\\n    }\\n    \\n    /**\\n     * @notice Get current price from Pyth feed\\n     * @param priceFeedId Pyth price feed ID\\n     * @return price Current price\\n     * @return expo Price exponent\\n     * @return timestamp Price timestamp\\n     */\\n    function getCurrentPrice(bytes32 priceFeedId) \\n        external \\n        view \\n        returns (int64 price, int32 expo, uint timestamp) \\n    {\\n        PythStructs.Price memory priceData = pyth.getPriceUnsafe(priceFeedId);\\n        return (priceData.price, priceData.expo, priceData.publishTime);\\n    }\\n    \\n    // Receive ETH for LayerZero fees\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0x167ea5d4af34d96894bf867b7637b2a08698e1d1343dd508ed122fe049978f17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806377fd00c51161008a578063f2fde38b11610059578063f2fde38b146102fe578063f6fb25701461031e578063f82cc4f514610358578063f98d06f01461036d57600080fd5b806377fd00c5146102415780638da5cb5b14610261578063a85c38ef14610293578063b2abb70f146102ca57600080fd5b806333e7dddb116100c657806333e7dddb146101c3578063514fcac7146101d85780635bbf7491146101f8578063715018a61461022c57600080fd5b8063027bbe22146101035780630ce2f7e11461014a578063161e444e1461016a5780632453ffa8146101ad57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b506101377fe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b4381565b6040519081526020015b60405180910390f35b34801561015657600080fd5b506101376101653660046115e8565b6103a1565b34801561017657600080fd5b5061018a61018536600461168d565b6107b4565b6040805160079490940b845260039290920b602084015290820152606001610141565b3480156101b957600080fd5b5061013760035481565b6101d66101d13660046116a6565b610863565b005b3480156101e457600080fd5b506101d66101f336600461168d565b610f01565b34801561020457600080fd5b506101377fff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace81565b34801561023857600080fd5b506101d66110b5565b34801561024d57600080fd5b506101d661025c36600461168d565b6110c9565b34801561026d57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610141565b34801561029f57600080fd5b506102b36102ae36600461168d565b6112b0565b6040516101419b9a99989796959493929190611795565b3480156102d657600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030a57600080fd5b506101d6610319366004611826565b6113af565b34801561032a57600080fd5b5061033e61033936600461168d565b6113ea565b60408051921515835260079190910b602083015201610141565b34801561036457600080fd5b50610137600a81565b34801561037957600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103ab6114e9565b600089116103f55760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b60448201526064015b60405180910390fd5b60008660070b136104485760405162461bcd60e51b815260206004820152601860248201527f546172676574207072696365206d757374206265203e2030000000000000000060448201526064016103ec565b8763ffffffff1660000361049e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642064657374696e6174696f6e2045494400000000000000000060448201526064016103ec565b6040516323b872dd60e01b8152336004820152306024820152604481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190611856565b6105515760405162461bcd60e51b81526004016103ec90611878565b60038054906000610561836118b7565b9190505590506000808511610577576000610581565b61058185426118d0565b9050604051806101600160405280838152602001336001600160a01b031681526020018b81526020018a63ffffffff1681526020018981526020018860070b81526020018760018111156105d7576105d7611725565b81526020016000815260200142815260200182815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050848152600260208181526040928390208551815590850151600180830180546001600160a01b0319166001600160a01b03909316929092179091559285015191810191909155606084015160038201805463ffffffff191663ffffffff9092169190911790556080840151600482015560a084015160058201805467ffffffffffffffff19811667ffffffffffffffff909316928317825560c08701519395509293909268ffffffffffffffffff191690911790600160401b9084908111156106f2576106f2611725565b021790555060e082015160058201805460ff60481b1916600160481b83600381111561072057610720611725565b02179055506101008201516006820155610120820151600782015561014082015160088201906107509082611989565b50905050336001600160a01b0316827fd21acf11a178198c7e78ec0e59d157e83358a71118dab700cf75e87f5c3ddd6f8c8c8c8c8c604051610796959493929190611a49565b60405180910390a3506107a860018055565b98975050505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396834ad3866040518263ffffffff1660e01b815260040161080891815260200190565b608060405180830381865afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108499190611aa1565b805160408201516060909201519097919650945092505050565b61086b6114e9565b6000838152600260205260408120906005820154600160481b900460ff16600381111561089a5761089a611725565b146108b75760405162461bcd60e51b81526004016103ec90611b23565b600781015415806108cc575080600701544211155b6109085760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016103ec565b60405163d47eed4560e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d47eed45906109599087908790600401611b77565b602060405180830381865afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190611c13565b9050803410156109f65760405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e742066656520666f722070726963652075706461746044820152606560f81b60648201526084016103ec565b604051631df3cbc560e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ef9e5e28908390610a469088908890600401611b77565b6000604051808303818588803b158015610a5f57600080fd5b505af1158015610a73573d6000803e3d6000fd5b5050505060048381015460405163052571af60e51b815291820152603c6024820152600091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a4ae35e090604401608060405180830381865afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190611aa1565b90506000806005850154600160401b900460ff166001811115610b3357610b33611725565b03610b4e575060058301548151600791820b910b1215610b60565b5060058301548151600791820b910b13155b80610bad5760405162461bcd60e51b815260206004820152601760248201527f507269636520636f6e646974696f6e206e6f74206d657400000000000000000060448201526064016103ec565b6000612710600a8660020154610bc39190611c2c565b610bcd9190611c43565b90506000818660020154610be19190611c65565b90508115610cbf5760405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190611856565b610cbf5760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b60448201526064016103ec565b60018601546040805160e081018252600389015463ffffffff1681526001600160a01b039092166020830181905290820183905260608201839052600888018054919260009290916080830191610d15906118ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610d41906118ff565b8015610d8e5780601f10610d6357610100808354040283529160200191610d8e565b820191906000526020600020905b815481529060010190602001808311610d7157829003601f168201915b50505050508152602001604051806020016040528060008152508152602001604051806020016040528060008152508152509050600060405180604001604052808934610ddb9190611c65565b8152600060209091015290506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c7c7f5b3610e208a34611c65565b60018c01546040516001600160e01b031960e085901b168152610e5391879187916001600160a01b031690600401611c78565b60c06040518083038185885af1158015610e71573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e969190611d83565b505060058901805460ff60481b1916600160481b17905586516040805160079290920b82525133918e917fd7bcec6428501bf3d6ad877e5b7d715a142cf3bee1928c3674312df9ebcb6d239181900360200190a3505050505050505050610efc60018055565b505050565b610f096114e9565b600081815260026020526040902060018101546001600160a01b03163314610f655760405162461bcd60e51b815260206004820152600f60248201526e2737ba1037b93232b91037bbb732b960891b60448201526064016103ec565b60006005820154600160481b900460ff166003811115610f8757610f87611725565b14610fa45760405162461bcd60e51b81526004016103ec90611b23565b6001810154600282015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190611856565b6110605760405162461bcd60e51b81526004016103ec90611878565b60058101805460ff60481b19166902000000000000000000179055604051339083907fc0362da6f2ff36b382b34aec0814f6b3cdf89f5ef282a1d1f114d0c0b036d59690600090a3506110b260018055565b50565b6110bd611513565b6110c76000611540565b565b6000818152600260205260408120906005820154600160481b900460ff1660038111156110f8576110f8611725565b146111155760405162461bcd60e51b81526004016103ec90611b23565b600081600701541161115f5760405162461bcd60e51b81526020600482015260136024820152724f7264657220686173206e6f2065787069727960681b60448201526064016103ec565b806007015442116111aa5760405162461bcd60e51b815260206004820152601560248201527413dc99195c881b9bdd08195e1c1a5c9959081e595d605a1b60448201526064016103ec565b6001810154600282015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190611856565b6112665760405162461bcd60e51b81526004016103ec90611878565b60058101805460ff60481b1916690300000000000000000017905560405182907f1ad308dc7017610c82d08084545f7176df5e2f08f078c3c8f8926cd7e555551490600090a25050565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600780880154600889018054989a6001600160a01b031699979863ffffffff9097169795969285900b9560ff600160401b8704811696600160481b900416949390919061132c906118ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611358906118ff565b80156113a55780601f1061137a576101008083540402835291602001916113a5565b820191906000526020600020905b81548152906001019060200180831161138857829003601f168201915b505050505090508b565b6113b7611513565b6001600160a01b0381166113e157604051631e4fbdf760e01b8152600060048201526024016103ec565b6110b281611540565b60008181526002602052604080822060048082015492516396834ad360e01b815290810192909252829182907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906396834ad390602401608060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190611aa1565b80519350905060006005830154600160401b900460ff1660018111156114b3576114b3611725565b036114cf576005820154600790810b9084900b121593506114e2565b6005820154600790810b9084900b131593505b5050915091565b60026001540361150c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000546001600160a01b031633146110c75760405163118cdaa760e01b81523360048201526024016103ec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8060070b81146110b257600080fd5b60008083601f8401126115b157600080fd5b50813567ffffffffffffffff8111156115c957600080fd5b6020830191508360208285010111156115e157600080fd5b9250929050565b60008060008060008060008060e0898b03121561160457600080fd5b88359750602089013563ffffffff8116811461161f57600080fd5b965060408901359550606089013561163681611590565b945060808901356002811061164a57600080fd5b935060a0890135925060c089013567ffffffffffffffff81111561166d57600080fd5b6116798b828c0161159f565b999c989b5096995094979396929594505050565b60006020828403121561169f57600080fd5b5035919050565b6000806000604084860312156116bb57600080fd5b83359250602084013567ffffffffffffffff808211156116da57600080fd5b818601915086601f8301126116ee57600080fd5b8135818111156116fd57600080fd5b8760208260051b850101111561171257600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052602160045260246000fd5b6002811061174b5761174b611725565b9052565b6000815180845260005b8181101561177557602081850181015186830182015201611759565b506000602082860101526020601f19601f83011685010191505092915050565b8b81526001600160a01b038b166020820152604081018a905263ffffffff8916606082015260808101889052600787900b60a082015260006101606117dd60c084018961173b565b600487106117ed576117ed611725565b8660e08401528561010084015284610120840152806101408401526118148184018561174f565b9e9d5050505050505050505050505050565b60006020828403121561183857600080fd5b81356001600160a01b038116811461184f57600080fd5b9392505050565b60006020828403121561186857600080fd5b8151801515811461184f57600080fd5b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016118c9576118c96118a1565b5060010190565b808201808211156118e3576118e36118a1565b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061191357607f821691505b60208210810361193357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610efc576000816000526020600020601f850160051c810160208610156119625750805b601f850160051c820191505b818110156119815782815560010161196e565b505050505050565b815167ffffffffffffffff8111156119a3576119a36118e9565b6119b7816119b184546118ff565b84611939565b602080601f8311600181146119ec57600084156119d45750858301515b600019600386901b1c1916600185901b178555611981565b600085815260208120601f198616915b82811015611a1b578886015182559484019460019091019084016119fc565b5085821015611a395787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815263ffffffff8516602082015260408101849052600783900b606082015260a08101611a7a608083018461173b565b9695505050505050565b805167ffffffffffffffff81168114611a9c57600080fd5b919050565b600060808284031215611ab357600080fd5b6040516080810181811067ffffffffffffffff82111715611ad657611ad66118e9565b6040528251611ae481611590565b8152611af260208401611a84565b602082015260408301518060030b8114611b0b57600080fd5b60408201526060928301519281019290925250919050565b6020808252601190820152704f72646572206e6f742070656e64696e6760781b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b87811015611c0657868403603f190183528135368a9003601e19018112611bbc57600080fd5b8901858101903567ffffffffffffffff811115611bd857600080fd5b803603821315611be757600080fd5b611bf2868284611b4e565b955050509184019190840190600101611b96565b5091979650505050505050565b600060208284031215611c2557600080fd5b5051919050565b80820281158282048414176118e3576118e36118a1565b600082611c6057634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156118e3576118e36118a1565b6080815263ffffffff8451166080820152602084015160a0820152604084015160c0820152606084015160e08201526000608085015160e0610100840152611cc461016084018261174f565b905060a0860151607f198085840301610120860152611ce3838361174f565b925060c08801519150808584030161014086015250611d02828261174f565b92505050611d1d602083018580518252602090810151910152565b6001600160a01b0383166060830152949350505050565b600060408284031215611d4657600080fd5b6040516040810181811067ffffffffffffffff82111715611d6957611d696118e9565b604052825181526020928301519281019290925250919050565b60008082840360c0811215611d9757600080fd5b6080811215611da557600080fd5b506040516060810181811067ffffffffffffffff82111715611dc957611dc96118e9565b60405283518152611ddc60208501611a84565b6020820152611dee8560408601611d34565b60408201529150611e028460808501611d34565b9050925092905056fea2646970667358221220faa3dd4ca39f4ae13415c77a819b452e063984c06b20b30658e147f573e090ae64736f6c63430008160033",
  "devdoc": {
    "details": "Integrates Pyth Network price feeds with LayerZero OFT bridging",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelOrder(uint256)": {
        "params": {
          "orderId": "Order ID to cancel"
        }
      },
      "checkOrderCondition(uint256)": {
        "params": {
          "orderId": "Order ID to check"
        },
        "returns": {
          "currentPrice": "Current price from Pyth",
          "met": "Whether condition is met"
        }
      },
      "createOrder(uint256,uint32,bytes32,int64,uint8,uint256,bytes)": {
        "params": {
          "amount": "Amount of OFT tokens to bridge",
          "conditionType": "PRICE_ABOVE or PRICE_BELOW",
          "dstEid": "Destination chain endpoint ID (LayerZero)",
          "expiryDuration": "How long the order is valid (in seconds, 0 for no expiry)",
          "lzOptions": "LayerZero send options (gas settings, etc.)",
          "priceFeedId": "Pyth price feed ID to monitor",
          "targetPrice": "Target price (with 8 decimals, e.g., 3800e8 for $3800)"
        }
      },
      "executeOrder(uint256,bytes[])": {
        "details": "Anyone can call this (keeper/bot), executor gets a small reward",
        "params": {
          "orderId": "Order ID to execute",
          "priceUpdate": "Pyth price update data (fetch from Hermes API)"
        }
      },
      "getCurrentPrice(bytes32)": {
        "params": {
          "priceFeedId": "Pyth price feed ID"
        },
        "returns": {
          "expo": "Price exponent",
          "price": "Current price",
          "timestamp": "Price timestamp"
        }
      },
      "markExpired(uint256)": {
        "params": {
          "orderId": "Order ID to mark as expired"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ConditionalBridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelOrder(uint256)": {
        "notice": "Cancel a pending order and return tokens to user"
      },
      "checkOrderCondition(uint256)": {
        "notice": "Check if order condition is currently met (view function)"
      },
      "createOrder(uint256,uint32,bytes32,int64,uint8,uint256,bytes)": {
        "notice": "Create a conditional bridge order"
      },
      "executeOrder(uint256,bytes[])": {
        "notice": "Execute a bridge order when price condition is met"
      },
      "getCurrentPrice(bytes32)": {
        "notice": "Get current price from Pyth feed"
      },
      "markExpired(uint256)": {
        "notice": "Mark expired orders (callable by anyone)"
      }
    },
    "notice": "Enables automated token bridging when price conditions are met",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 718,
        "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
        "label": "orders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(BridgeOrder)713_storage)"
      },
      {
        "astId": 720,
        "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
        "label": "orderCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ConditionType)683": {
        "encoding": "inplace",
        "label": "enum ConditionalBridge.ConditionType",
        "numberOfBytes": "1"
      },
      "t_enum(OrderStatus)688": {
        "encoding": "inplace",
        "label": "enum ConditionalBridge.OrderStatus",
        "numberOfBytes": "1"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_uint256,t_struct(BridgeOrder)713_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ConditionalBridge.BridgeOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeOrder)713_storage"
      },
      "t_struct(BridgeOrder)713_storage": {
        "encoding": "inplace",
        "label": "struct ConditionalBridge.BridgeOrder",
        "members": [
          {
            "astId": 690,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 692,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 694,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 696,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "dstEid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 698,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "priceFeedId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 700,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "targetPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_int64"
          },
          {
            "astId": 703,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "conditionType",
            "offset": 8,
            "slot": "5",
            "type": "t_enum(ConditionType)683"
          },
          {
            "astId": 706,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "status",
            "offset": 9,
            "slot": "5",
            "type": "t_enum(OrderStatus)688"
          },
          {
            "astId": 708,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "createdAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 710,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "expiresAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 712,
            "contract": "contracts/ConditionalBridge.sol:ConditionalBridge",
            "label": "lzOptions",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}